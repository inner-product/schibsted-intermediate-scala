#+TITLE: Day 4
* Type Classes
- What do they do for us?
- From the user side
- From the implementor side

~implicits~
** What Do They Do
*Ad hoc polymorphism*
- how can we get different types to implement the same interface?

Algebraic data types:
- closed world
- add new functionality (without modifying existing code) but not new data

#+begin_lang scala
// Cannot add new data without modifying existing code (which we might not have
// access to)
sealed trait Option[A]
final case class Some[A](value: A) extends Option[A]
final case class None[A]() extends Option[A]

// Add new functions
object OptionExample {
  def map[A, B](option: Option[A])(f: A => B): Option[B] =
    option match {
      case Some(v) => Some(f(v))
      case None() => None()
    }
}
#+end_lang


OO:
- traits (but not sealed traits)
- can add new data (extend the trait)
- cannot add new methods to the trait without breaking existing code

#+begin_lang scala
trait Calculator {
  def add(x: Double, y: Double): Double
  def multiply(x: Double, y: Double): Double
  def divide(x: Double, y: Double): Double
  def subtract(x: Double, y: Double): Double
}

// Can create arbitrary number of things that extend Calculator
object DoubleCalculator extends Calculator {
  def add(x: Double, y: Double): Double =
    x + y
  def multiply(x: Double, y: Double): Double =
    x * y
  def divide(x: Double, y: Double): Double =
    x / y
  def subtract(x: Double, y: Double): Double =
    x - y
}

object NoisyCalculator extends Calculator {
  def add(x: Double, y: Double): Double = {
    println(s"Adding $x $y")
    x + y
  }
  def multiply(x: Double, y: Double): Double = {
    println(s"Multiplying $x $y")
    x * y
  }
  def divide(x: Double, y: Double): Double =
    x / y
  def subtract(x: Double, y: Double): Double =
    x - y
}

object CalculatorExample {
// Cannot implement this because we don't know everything that subtypes Calculator
  def doSomething(calc: Calculator): SomeResult =
    calc match {
       case ???
    }
}
#+end_lang

Summary:
- FP: add new functionality (methods that work with data) but not new data (cases in the algebraic data type)
- OO: add new data (extend an interface) but not new functionality (methods on an interface)

Adding new data that implements an interface == ad-hoc polymorphism
- Restriction in OO is that you have to declare it at the time you implement the type

JSON serialization:
- want to serialize String, Date, etc.
- might think of some method ~toJson~
- but JSON wasn't invented in the 1990s when Java came out

Type classes:
- say that a type implements an interface (a class; hence the name) without having to declare that at the same time the type is declared.
** Using Type Classes
Assume someone else has defined the type classes. How do we use them?
Answer: implicit parameters (or context bounds, which are simpler syntax for the same thing)

If we have a method:

#+begin_lang scala
1 |+| 2
1.combine(2)
List(1, 2, 3) |+| List(4, 5, 6)

import cats.Monoid
def reduce[A](data: List[A])(implicit monoid: Monoid[A]): A =
  data.combineAll
#+end_lang

We want a monoid
- we make the parameter implicit
- this means the compiler will pass a value for the parameter if 1) we don't pass one explicitly and 2) it can find a value to pass

Where does the compiler look for values?
Answer: implicit scope (What is the implicit scope?)

What if there is more than one value available in the implicit scope?
Answer: the compiler will complain about ambiguous implicit values
(It's good practice to not have more than one implicit value available)

The implicit scope:
- The normal lexical scope
- Companion objects of associated types. Any type mentioned in an error if the type class instance (implicit value) cannot be found.

Summary:
- An implicit parameter means the compiler can provide a method parameter that is not explicitly passed
- The values that compiler will pass are called implicit values (type class instances)
- The compiler looks for implicit values in the implicit scope (lexical scope + companion objects of associated types)
** Context Bounds
A context bound allows us to write an implicit parameter list implicitly.

These are equivalent:
#+begin_lang scala
def combine[A](a1: A, a2: A)(implicit s: Semigroup[A]): A =
  s.combine(a1, a2)

def combine[A: Semigroup](a1: A, a2: A): A =
  a1 |+| a2
#+end_lang

Can use one or the other but not both.

Context bounds do not give an accessible name to the implicit parameters
- can use ~implicitly~ to access them, if needed, but you're doing it wrong if you want to refer explicitly to implicit parameters---just use implicits parameters with names in this case

#+begin_lang options
def combine[A: Semigroup](a1: A, a2: A): A = {
  val s = implicitly[Semigroup[A]]
  s.combine(a1, a2)
}
#+end_lang
** Higher-Kinded Types
~F[_]~

Type constructors vs types
- ~List[Int]~ is a type. Analogous to non-function values.
- ~List~ is not a type. It is a type constructor. Analogous to a function value: pass a type to it and we get a type back.

Kinds are the "types" of types
- ~Int~, ~List[Int]~, ~String~ have kind *
- ~List~ has kind * -> *

A type constructor with kind * -> * is written ~F[_]~ in Scala. The ~_~ indicates a type "hole" where we must provide a type. Can also write ~F[_,_]~ etc.
** Implicit Parameters as Constraints
We can think of a type class as expressing a constraint on a type variable.

~def foo[A](a: A)~ means any type A
~def foo[A: Semigroup](a: A)~ means any type A that has a Semigroup available
** Type Classes
- [X] implicit parameters (important)
- [ ] implicit values (important)
- [ ] implicit classes (not really necessary)
- [ ] implicit parameters (evil)

|----------------------+---------------------------------------|
| Type class concepts  | Scala implementation                  |
|----------------------+---------------------------------------|
| Type class           | trait                                 |
| Type class instances | implicit value                        |
| Type class use       | implicit parameter (or context bound) |
| Ease of use          | implicit class                        |
|----------------------+---------------------------------------|

*** Type Class
A trait that specifies an interface. E.g. ~Semigroup~. Type classes must always have at least one type parameter.
*** Type Class Instances
Type class instances are implicit values that implement the type class trait.

Three ways of declaring:
1. ~implicit val~
2. ~implicit object~
3. ~implicit def~ where *all the parameters are implicit*

Note that implicit values cannot be defined at the top level (in Scala 2).
Normally put them inside a relevant companion object so the compiler automatically finds them without requiring the user to import them.

Note that implicit parameters count as implicit values in the scope of the method where they are defined.
